namespace: keycloak

helmCharts:
  - repo: https://helm.pomerium.io
    name: keycloak
    valuesInline:
      global:
        imageRegistry: ""
        ## E.g.
        ## imagePullSecrets:
        ##   - myRegistryKeySecretName
        ##
        imagePullSecrets: []
        storageClass: ""

      kubeVersion: ""
      nameOverride: ""
      fullnameOverride: ""
      namespaceOverride: ""
      commonLabels: {}
      commonAnnotations: {}
      clusterDomain: cluster.local
      extraDeploy: []
      diagnosticMode:
        enabled: false
        command:
          - sleep
        args:
          - infinity
      image:
        registry: docker.io
        repository: bitnami/keycloak
        tag: 20.0.5-debian-11-r4
        digest: ""
        pullPolicy: IfNotPresent
        pullSecrets: []
        debug: false
      auth:
        adminUser: user
        adminPassword: ""
        existingSecret: "keycloak-admin"
        passwordSecretKey: "password"
      tls:
        enabled: false
        autoGenerated: false
        existingSecret: ""
        usePem: false
        truststoreFilename: "keycloak.truststore.jks"
        keystoreFilename: "keycloak.keystore.jks"
        keystorePassword: ""
        truststorePassword: ""
        passwordsSecret: ""

      spi:
        existingSecret: ""
        truststorePassword: ""
        truststoreFilename: "keycloak-spi.truststore.jks"
        passwordsSecret: ""
        hostnameVerificationPolicy: ""
      production: false
      proxy: passthrough
      httpRelativePath: "/"
      configuration: ""
      existingConfigmap: ""
      extraStartupArgs: ""
      initdbScripts: {}
      initdbScriptsConfigMap: ""
      command: []
      args: []
      extraEnvVars: []
      extraEnvVarsCM: ""
      extraEnvVarsSecret: ""
      replicaCount: 1
      containerPorts:
        http: 8080
        https: 8443
        infinispan: 7800
      extraContainerPorts: []
      podSecurityContext:
        enabled: true
        fsGroup: 1001
      containerSecurityContext:
        enabled: true
        runAsUser: 1001
        runAsNonRoot: true
      resources:
        limits: {}
        requests: {}
      livenessProbe:
        enabled: true
        initialDelaySeconds: 300
        periodSeconds: 1
        timeoutSeconds: 5
        failureThreshold: 3
        successThreshold: 1
      readinessProbe:
        enabled: true
        initialDelaySeconds: 30
        periodSeconds: 10
        timeoutSeconds: 1
        failureThreshold: 3
        successThreshold: 1
      startupProbe:
        enabled: false
        initialDelaySeconds: 30
        periodSeconds: 5
        timeoutSeconds: 1
        failureThreshold: 60
        successThreshold: 1
      customLivenessProbe: {}
      customReadinessProbe: {}
      customStartupProbe: {}
      lifecycleHooks: {}
      hostAliases: []
      podLabels: {}
      podAnnotations: {}
      podAffinityPreset: ""
      podAntiAffinityPreset: soft
      nodeAffinityPreset:
        type: ""
        key: ""
        values: []
      affinity: {}
      nodeSelector: {}
      tolerations: []
      topologySpreadConstraints: []
      podManagementPolicy: Parallel
      priorityClassName: ""
      schedulerName: ""
      terminationGracePeriodSeconds: ""
      updateStrategy:
        type: RollingUpdate
        rollingUpdate: {}
      extraVolumes: []
      extraVolumeMounts: []
      initContainers: []
      sidecars: []
      service:
        type: LoadBalancer
        http:
          enabled: true
        ports:
          http: 80
          https: 443
        nodePorts:
          http: ""
          https: ""
        sessionAffinity: None
        sessionAffinityConfig: {}
        clusterIP: ""
        loadBalancerIP: ""
        loadBalancerSourceRanges: []
        externalTrafficPolicy: Cluster
        annotations: {}
        extraPorts: []
        extraHeadlessPorts: []
      ingress:
        enabled: true
        ingressClassName: "nginx"
        pathType: ImplementationSpecific
        apiVersion: ""
        hostname: keycloak.itscoming.run
        path: /
        servicePort: http
        annotations: {}
        tls: false
        selfSigned: false
        extraHosts: []
        extraPaths: []
        extraTls: []
        secrets: []
        extraRules: []
      networkPolicy:
        enabled: false
        allowExternal: true
        additionalRules: {}
      serviceAccount:
        create: true
        name: ""
        automountServiceAccountToken: true
        annotations: {}
        extraLabels: {}
      rbac:
        create: false
        ## @param rbac.rules Custom RBAC rules
        ## Example:
        ## rules:
        ##   - apiGroups:
        ##       - ""
        ##     resources:
        ##       - pods
        ##     verbs:
        ##       - get
        ##       - list
        ##
        rules: []

      pdb:
        create: false
        minAvailable: 1
        maxUnavailable: ""
      autoscaling:
        enabled: false
        minReplicas: 1
        maxReplicas: 11
        targetCPU: ""
        targetMemory: ""
      metrics:
        enabled: false
        service:
          ports:
            http: 8080
          annotations:
            prometheus.io/scrape: "true"
            prometheus.io/port: "{{ .Values.metrics.service.ports.http }}"
        serviceMonitor:
          enabled: false
          port: http
          endpoints:
            - path: /metrics
            - path: /realms/master/metrics
          path: ""
          namespace: ""
          interval: 30s
          scrapeTimeout: ""
          labels: {}
          selector: {}
          relabelings: []
          metricRelabelings: []
          honorLabels: false
          jobLabel: ""
        prometheusRule:
          enabled: false
          namespace: ""
          labels: {}
          groups: []
      keycloakConfigCli:
        enabled: false
        image:
          registry: docker.io
          repository: bitnami/keycloak-config-cli
          tag: 5.5.0-debian-11-r36
          digest: ""
          pullPolicy: IfNotPresent
          pullSecrets: []
        annotations:
          helm.sh/hook: "post-install,post-upgrade,post-rollback"
          helm.sh/hook-delete-policy: "hook-succeeded,before-hook-creation"
          helm.sh/hook-weight: "5"
        command: []
        args: []
        hostAliases: []
        resources:
          limits: {}
          requests: {}
        containerSecurityContext:
          enabled: true
          runAsUser: 1001
          runAsNonRoot: true
        podSecurityContext:
          enabled: true
          fsGroup: 1001
        backoffLimit: 1
        podLabels: {}
        podAnnotations: {}
        podTolerations: []
        extraEnvVars: []
        extraEnvVarsCM: ""
        extraEnvVarsSecret: ""
        extraVolumes: []
        extraVolumeMounts: []
        initContainers: []
        sidecars: []
        configuration: {}
        existingConfigmap: ""
      postgresql:
        enabled: true
        auth:
          postgresPassword: ""
          username: bn_keycloak
          password: ""
          database: bitnami_keycloak
          existingSecret: ""
        architecture: standalone
      externalDatabase:
        host: ""
        port: 5432
        user: bn_keycloak
        database: bitnami_keycloak
        password: ""
        existingSecret: ""
        existingSecretPasswordKey: ""
      cache:
        enabled: true
        stackName: kubernetes
        stackFile: ""
      logging:
        output: default
        level: INFO
